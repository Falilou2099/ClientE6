<?php
namespace Controllers;

use Models\Order;
use Models\Client;
use Models\Product;

class SalesController {
    /**
     * Affiche la liste des ventes (historique)
     */
    public function index() {
        // Vérifier si l'utilisateur est connecté
        if (!isset($_SESSION['user_id'])) {
            $_SESSION['error'] = "Vous devez être connecté pour accéder à cette page.";
            header('Location: /bigpharma/login');
            exit;
        }

        // Récupérer les paramètres de recherche, de filtrage et de pagination
        $search = isset($_GET['search']) ? trim($_GET['search']) : '';
        $page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
        $perPage = 10; // Nombre de ventes par page
        $pharmacieId = isset($_SESSION['pharmacie_id']) ? $_SESSION['pharmacie_id'] : null;
        
        // Récupérer les paramètres de filtrage
        $date_debut = isset($_GET['date_debut']) ? $_GET['date_debut'] : '';
        $date_fin = isset($_GET['date_fin']) ? $_GET['date_fin'] : '';
        $produit_id = isset($_GET['produit_id']) ? (int)$_GET['produit_id'] : 0;
        $client_id = isset($_GET['client_id']) ? (int)$_GET['client_id'] : 0;
        
        // Récupérer le paramètre de tri
        $sort = isset($_GET['sort']) ? $_GET['sort'] : 'date_desc';
        
        // Initialiser les variables par défaut
        $sales = [];
        $totalSales = 0;
        $totalPages = 0;
        $salesStats = [
            'total_ventes' => 0,
            'montant_total' => 0,
            'ventes_aujourd_hui' => 0,
            'montant_aujourd_hui' => 0,
            'ventes_ce_mois' => 0,
            'montant_ce_mois' => 0,
            'produits_populaires' => []
        ];
        
        try {
            // Récupérer les listes pour les filtres
            $produits = $this->getProductsList();
            $clients = $this->getClientsList();
            
            // Récupérer les ventes avec filtres et tri
            $sales = $this->getSales($search, $page, $perPage, $pharmacieId, $date_debut, $date_fin, $produit_id, $client_id, $sort);
            $totalSales = $this->getTotalSalesCount($search, $pharmacieId, $date_debut, $date_fin, $produit_id, $client_id);
            
            // Calculer le nombre total de pages
            $totalPages = ceil($totalSales / $perPage);
            
            // Calculer les statistiques des ventes
            $salesStats = $this->calculateSalesStats($pharmacieId);
            
            // Enrichir les données des ventes avec les noms des produits
            foreach ($sales as &$sale) {
                $sale['produits'] = $this->getProductNamesBySaleId($sale['commande_id']);
            }
        } catch (\Exception $e) {
            // Journaliser l'erreur
            error_log('Erreur lors de la récupération des ventes: ' . $e->getMessage());
            
            // Afficher un message d'erreur
            $error = 'Une erreur est survenue lors de la récupération des ventes.';
        }
        
        // Charger la vue avec les données (qu'il y ait eu une erreur ou non)
        require_once __DIR__ . '/../../views/sales/index.php';
    }

    /**
     * Affiche les détails d'une vente
     */
    public function show($id) {
        // Vérifier si l'utilisateur est connecté
        if (!isset($_SESSION['user_id'])) {
            $_SESSION['error'] = "Vous devez être connecté pour accéder à cette page.";
            header('Location: /bigpharma/login');
            exit;
        }
        
        try {
            // Récupérer la vente par son ID
            $sale = $this->getSaleById($id);
            
            if (!$sale) {
                // Vente non trouvée
                $_SESSION['error'] = "La vente avec l'ID $id n'existe pas.";
                header('Location: /bigpharma/sales');
                exit;
            }
            
            // Récupérer les détails de la vente (produits, client, etc.)
            $saleDetails = $this->getSaleDetails($id);
            
            if ($saleDetails === false) {
                $_SESSION['error'] = "Impossible de récupérer les détails de la vente.";
                header('Location: /bigpharma/sales');
                exit;
            }
            
            // Charger la vue avec les données
            require_once __DIR__ . '/../../views/sales/show.php';
        } catch (\Exception $e) {
            // Journaliser l'erreur
            error_log('Erreur lors de l\'affichage des détails de la vente: ' . $e->getMessage());
            $_SESSION['error'] = "Une erreur est survenue lors de l'affichage des détails de la vente.";
            header('Location: /bigpharma/sales');
            exit;
        }
    }
    /**
     * Récupère les ventes avec pagination, recherche, filtrage et tri
     */
    private function getSales($search = '', $page = 1, $perPage = 10, $pharmacieId = null, $dateDebut = '', $dateFin = '', $produitId = 0, $clientId = 0, $sort = 'date_desc') {
        // Calculer l'offset pour la pagination
        $offset = ($page - 1) * $perPage;
        
        // Connexion à la base de données
        $pdo = $this->initPDO();
        
        try {
            // Vérifier si la table commandes existe
            $stmt = $pdo->query("SHOW TABLES LIKE 'commandes'");
            $tableExists = $stmt->rowCount() > 0;
            
            if (!$tableExists) {
                // La table n'existe pas, retourner un tableau vide
                error_log("La table 'commandes' n'existe pas dans la base de données.");
                return [];
            }
            
            // Vérifier les colonnes de la table commandes
            $stmt = $pdo->query("DESCRIBE commandes");
            $columns = $stmt->fetchAll(\PDO::FETCH_COLUMN);
            
            // Construire la requête SQL en fonction des colonnes disponibles
            $query = "SELECT c.id AS commande_id, c.date_commande, c.montant_total";
            
            // Vérifier si les colonnes optionnelles existent
            if (in_array('mode_paiement', $columns)) {
                $query .= ", c.mode_paiement";
            } else {
                $query .= ", 'Non spécifié' AS mode_paiement";
            }
            
            if (in_array('reduction', $columns)) {
                $query .= ", c.reduction";
            } else {
                $query .= ", 0 AS reduction";
            }
            
            $query .= ",
                        cl.id AS client_id, cl.nom, cl.prenom";
            
            // Vérifier si les colonnes email et telephone existent dans la table clients
            $stmt = $pdo->query("DESCRIBE clients");
            $clientColumns = $stmt->fetchAll(\PDO::FETCH_COLUMN);
            
            if (in_array('email', $clientColumns)) {
                $query .= ", cl.email";
            } else {
                $query .= ", NULL AS email";
            }
            
            if (in_array('telephone', $clientColumns)) {
                $query .= ", cl.telephone";
            } else {
                $query .= ", NULL AS telephone";
            }
            
            $query .= ",
                        COUNT(lc.id) AS nombre_produits";
            
            // Vérifier si la table users existe et si elle a une colonne nom
            $stmt = $pdo->query("SHOW TABLES LIKE 'users'");
            $usersTableExists = $stmt->rowCount() > 0;
            
            if ($usersTableExists) {
                $stmt = $pdo->query("DESCRIBE users");
                $userColumns = $stmt->fetchAll(\PDO::FETCH_COLUMN);
                
                if (in_array('nom', $userColumns) && in_array('user_id', $columns)) {
                    $query .= ",
                        u.nom AS vendeur_nom";
                } else {
                    $query .= ",
                        NULL AS vendeur_nom";
                }
            } else {
                $query .= ",
                        NULL AS vendeur_nom";
            }
            
            $query .= "
                 FROM commandes c
                 LEFT JOIN clients cl ON c.client_id = cl.id
                 LEFT JOIN lignes_commande lc ON c.id = lc.commande_id";
            
            if ($usersTableExists && in_array('user_id', $columns) && in_array('nom', $userColumns)) {
                $query .= "
                 LEFT JOIN users u ON c.user_id = u.id";
            }
            
            $query .= "
                 LEFT JOIN produits p ON lc.produit_id = p.id";
            
            $params = [];
            $whereConditions = [];
            
            // Ajouter la condition de recherche si nécessaire
            if (!empty($search)) {
                $whereConditions[] = "(cl.nom LIKE :search OR cl.prenom LIKE :search OR p.nom LIKE :search)";
                $params[':search'] = '%' . $search . '%';
            }
            
            // Ajouter la condition de pharmacie si nécessaire
            if ($pharmacieId && in_array('pharmacie_id', $columns)) {
                $whereConditions[] = "c.pharmacie_id = :pharmacie_id";
                $params[':pharmacie_id'] = $pharmacieId;
            }
            
            // Ajouter le filtre de date de début si spécifié
            if (!empty($dateDebut)) {
                $whereConditions[] = "DATE(c.date_commande) >= :date_debut";
                $params[':date_debut'] = $dateDebut;
            }
            
            // Ajouter le filtre de date de fin si spécifié
            if (!empty($dateFin)) {
                $whereConditions[] = "DATE(c.date_commande) <= :date_fin";
                $params[':date_fin'] = $dateFin;
            }
            
            // Ajouter le filtre de produit si spécifié
            if ($produitId > 0) {
                $whereConditions[] = "lc.produit_id = :produit_id";
                $params[':produit_id'] = $produitId;
            }
            
            // Ajouter le filtre de client si spécifié
            if ($clientId > 0) {
                $whereConditions[] = "c.client_id = :client_id";
                $params[':client_id'] = $clientId;
            }
            
            // Ajouter les conditions WHERE si nécessaire
            if (!empty($whereConditions)) {
                $query .= " WHERE " . implode(" AND ", $whereConditions);
            }
            
            // Grouper par commande
            $query .= " GROUP BY c.id";
            
            // Déterminer l'ordre de tri
            switch ($sort) {
                case 'date_asc':
                    $query .= " ORDER BY c.date_commande ASC";
                    break;
                case 'montant_desc':
                    $query .= " ORDER BY c.montant_total DESC";
                    break;
                case 'montant_asc':
                    $query .= " ORDER BY c.montant_total ASC";
                    break;
                case 'date_desc':
                default:
                    $query .= " ORDER BY c.date_commande DESC";
                    break;
            }
            
            // Ajouter la pagination
            $query .= " LIMIT :offset, :perPage";
            $params[':offset'] = $offset;
            $params[':perPage'] = $perPage;
            
            // Exécuter la requête
            $stmt = $pdo->prepare($query);
            
            // Binder les paramètres
            foreach ($params as $key => $value) {
                if ($key == ':offset' || $key == ':perPage' || $key == ':produit_id' || $key == ':client_id') {
                    $stmt->bindValue($key, $value, \PDO::PARAM_INT);
                } else {
                    $stmt->bindValue($key, $value);
                }
            }
            
            $stmt->execute();
            
            // Retourner les résultats
            return $stmt->fetchAll(\PDO::FETCH_ASSOC);
        } catch (\Exception $e) {
            // Journaliser l'erreur
            error_log('Erreur lors de la récupération des ventes: ' . $e->getMessage());
            return [];
        }
    }

    /**
     * Récupère le nombre total de ventes avec filtres
     */
    private function getTotalSalesCount($search = '', $pharmacieId = null, $dateDebut = '', $dateFin = '', $produitId = 0, $clientId = 0) {
        // Connexion à la base de données
        $pdo = $this->initPDO();
        
        try {
            // Vérifier si la table commandes existe
            $stmt = $pdo->query("SHOW TABLES LIKE 'commandes'");
            $tableExists = $stmt->rowCount() > 0;
            
            if (!$tableExists) {
                // La table n'existe pas, retourner 0
                error_log("La table 'commandes' n'existe pas dans la base de données.");
                return 0;
            }
            
            // Vérifier les colonnes de la table commandes
            $stmt = $pdo->query("DESCRIBE commandes");
            $columns = $stmt->fetchAll(\PDO::FETCH_COLUMN);
            
            // Construire la requête SQL
            $query = "SELECT COUNT(DISTINCT c.id) AS total
                     FROM commandes c
                     LEFT JOIN clients cl ON c.client_id = cl.id
                     LEFT JOIN lignes_commande lc ON c.id = lc.commande_id
                     LEFT JOIN produits p ON lc.produit_id = p.id";
            
            $params = [];
            $whereConditions = [];
            
            // Ajouter la condition de recherche si nécessaire
            if (!empty($search)) {
                $whereConditions[] = "(cl.nom LIKE :search OR cl.prenom LIKE :search OR p.nom LIKE :search)";
                $params[':search'] = '%' . $search . '%';
            }
            
            // Ajouter la condition de pharmacie si nécessaire
            if ($pharmacieId && in_array('pharmacie_id', $columns)) {
                $whereConditions[] = "c.pharmacie_id = :pharmacie_id";
                $params[':pharmacie_id'] = $pharmacieId;
            }
            
            // Ajouter le filtre de date de début si spécifié
            if (!empty($dateDebut)) {
                $whereConditions[] = "DATE(c.date_commande) >= :date_debut";
                $params[':date_debut'] = $dateDebut;
            }
            
            // Ajouter le filtre de date de fin si spécifié
            if (!empty($dateFin)) {
                $whereConditions[] = "DATE(c.date_commande) <= :date_fin";
                $params[':date_fin'] = $dateFin;
            }
            
            // Ajouter le filtre de produit si spécifié
            if ($produitId > 0) {
                $whereConditions[] = "lc.produit_id = :produit_id";
                $params[':produit_id'] = $produitId;
            }
            
            // Ajouter le filtre de client si spécifié
            if ($clientId > 0) {
                $whereConditions[] = "c.client_id = :client_id";
                $params[':client_id'] = $clientId;
            }
            
            // Ajouter les conditions WHERE si nécessaire
            if (!empty($whereConditions)) {
                $query .= " WHERE " . implode(" AND ", $whereConditions);
            }
            
            // Exécuter la requête
            $stmt = $pdo->prepare($query);
            
            // Binder les paramètres
            foreach ($params as $key => $value) {
                if ($key == ':produit_id' || $key == ':client_id') {
                    $stmt->bindValue($key, $value, \PDO::PARAM_INT);
                } else {
                    $stmt->bindValue($key, $value);
                }
            }
            
            $stmt->execute();
            $result = $stmt->fetch(\PDO::FETCH_ASSOC);
            
            return $result['total'] ?? 0;
        } catch (\Exception $e) {
            // Journaliser l'erreur
            error_log('Erreur lors du comptage des ventes: ' . $e->getMessage());
            return 0;
        }
    }
